#include<iostream>
using namespace std;

class complex{
    public:
        double real , imag;
    //default constructor
    complex() : real(0) , imag(0) {}

    //parameterized constructor
    complex(double r , double i) {
        real = r;
        imag = i;
    }

    //overloading + operator
    complex operator +(const complex& c) 
    {
        return complex(real + c.real , imag + c.imag);
    }

    //overloading * operator
    complex operator *(const complex& c)
    {
        return complex(real * c.real - imag * c.imag , real * c.imag + imag *c.real);
    }

    //overloading << operator
    friend ostream& operator <<(ostream& os , const complex& c)
    {
        os << c.real << "+" << c.imag << "i";
        return os;
    }

    //overloading >> operator
    friend istream& operator>>(istream& is, complex& c) 
    {
        is >> c.real >> c.imag;
        return is;
    }
};

int main()
{
    complex c1 , c2;
    cout<<"Enter the real and imaginary parts of the first complex number:";
    cin>>c1;
    cout<<"Enter the real andimaginary parts of the second complex number:";
    cin>>c2;

    complex sum = c1 + c2;
    complex pro = c1 * c2;

    cout<< "Sum: " << sum << endl;
    cout<< "Product: " << pro << endl;
    return 0;
}
